import pickle, base64
exec(pickle.loads(base64.b64decode('')))
